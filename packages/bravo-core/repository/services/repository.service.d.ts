import { DeepPartial, EntityManager, EntityMetadata, FindConditions, FindManyOptions, FindOneOptions, ObjectLiteral, QueryRunner, RemoveOptions, Repository, SaveOptions, SelectQueryBuilder } from 'typeorm';
import { IObject } from '../../shared';
import { AuditLogService } from './audit-log.service';
export declare class RepositoryService<Entity extends ObjectLiteral> {
    readonly repository: Repository<Entity>;
    readonly auditLogService: AuditLogService<Entity>;
    readonly manager: EntityManager;
    readonly metadata: EntityMetadata;
    readonly queryRunner?: QueryRunner;
    get isSoftDelete(): boolean;
    get softDeleteField(): string;
    constructor(repository: Repository<Entity>, auditLogService: AuditLogService<Entity>);
    private getEntitiesByIdsOrConditions;
    create(): Entity;
    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];
    create(entityLike: DeepPartial<Entity>): Entity;
    merge(...entityLikes: DeepPartial<Entity>[]): Entity;
    count(options?: FindManyOptions<Entity>): Promise<number>;
    count(options?: FindConditions<Entity>): Promise<number>;
    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;
    find(conditions?: FindConditions<Entity>): Promise<Entity[]>;
    findAndCount(options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;
    findAndCount(conditions?: FindConditions<Entity>): Promise<[Entity[], number]>;
    findByIds(ids: number[], options?: FindManyOptions<Entity>): Promise<Entity[]>;
    findByIds(ids: number[], conditions?: FindConditions<Entity>): Promise<Entity[]>;
    findOne(id?: number, options?: FindOneOptions<Entity>): Promise<Entity | undefined>;
    findOne(options?: FindOneOptions<Entity>): Promise<Entity | undefined>;
    findOne(conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity | undefined>;
    insert(partialModel: DeepPartial<Entity>, options?: SaveOptions): Promise<Entity>;
    insertBulk(partialModels: DeepPartial<Entity>[], options?: SaveOptions): Promise<Entity[]>;
    update(id: number, partialModel: DeepPartial<Entity>, options?: SaveOptions): Promise<Entity | undefined>;
    update(conditions: FindConditions<Entity>, partialModel: DeepPartial<Entity>, options?: SaveOptions): Promise<Entity | undefined>;
    updateBulk(ids: number[], partialModels: DeepPartial<Entity>[], options?: SaveOptions): Promise<Entity[]>;
    updateBulk(ids: number[], partialModel: DeepPartial<Entity>, options?: SaveOptions): Promise<Entity[]>;
    updateBulk(conditions: FindConditions<Entity>, partialModels: DeepPartial<Entity>[], options?: SaveOptions): Promise<Entity[]>;
    updateBulk(conditions: FindConditions<Entity>, partialModels: DeepPartial<Entity>, options?: SaveOptions): Promise<Entity[]>;
    delete(id: number, options?: RemoveOptions): Promise<Entity | undefined>;
    delete(conditions: FindConditions<Entity>, options?: RemoveOptions): Promise<Entity | undefined>;
    deleteBulk(ids: number[], options?: RemoveOptions): Promise<Entity[]>;
    deleteBulk(conditions: FindConditions<Entity>, options?: RemoveOptions): Promise<Entity[]>;
    createQueryBuilder(alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;
    query<T = IObject[]>(query: string, parameters?: any[]): Promise<T>;
    clear(): Promise<void>;
}
